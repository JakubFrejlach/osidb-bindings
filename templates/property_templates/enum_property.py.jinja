{#
    This is a custom template derived from:
    https://github.com/openapi-generators/openapi-python-client/blob/ccf1fab06dc5cb4838b5c444c786e9352331f1b2/openapi_python_client/templates/property_templates/enum_property.py.jinja
#}
{% macro construct_function(property, source) %}
{{ property.class_info.name }}({{ source }})
{% endmacro %}

{% from "property_templates/property_macros.py.jinja" import construct_template %}

{% macro construct(property, source, initial_value=None) %}
{{ construct_template(construct_function, property, source, initial_value=initial_value) }}
{% endmacro %}

{% macro check_type_for_construct(property, source) %}isinstance({{ source }}, {{ property.value_type.__name__ }}){% endmacro %}

{% macro transform(property, source, destination, declare_type=True, stringify=False) %}
{% set type_string = property.get_type_string(json=True) %}
{% set type_base = property.get_type_string(no_optional=True) %}
{% set transformed_basic = source + ".value" %}
{% set transformed_typed = type_base + "(" +  source  + ").value" %}
{% set transformed = transformed_basic + " if isinstance(" + source + ", " + type_base + ") " + "else " + transformed_typed %}
{% if stringify %}
    {% set transformed_basic = "(None, str(" + transformed_basic + "), 'text/plain')" %}
    {% set type_string = "Union[Unset, Tuple[None, str, str]]" %}
{% endif %}
{% if property.required %}
{% if property.nullable %}
{{ destination }} = {{ transformed }} if {{ source }} else None
{% else %}
{{ destination }} = {{ transformed }}
{% endif %}
{% else %}
{{ destination }}{% if declare_type %}: {{ type_string }}{% endif %} = UNSET
if not isinstance({{ source }}, Unset):
{% if property.nullable %}
    {{ destination }} = {{ transformed }} if {{source}} else None
{% else %}
    {{ destination }} = {{ transformed }}
{% endif %}
{% endif %}
{% endmacro %}
